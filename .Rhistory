}
mean_heights_100
samples.1000 = 1000
mean_heights_1000 <- list(mode = "vector", length = samples.1000)
for(i in 1:1000){
mean_heights_1000 <- c(mean_heights_1000, get_heights(100))
}
max(mean_heights_100)
min(mean_heights_100)
max(mean_heights_1000)
min(mean_heights_1000)
mean_heights_100 = numeric() # creates empty vector with infinite spaces for unknown values
for(i in 1:1000){
mean_heights_100 <- c(mean_heights_100, get_heights(100))
}
mean_heights_1000 = numeric()
for(i in 1:1000){
mean_heights_1000 <- c(mean_heights_1000, get_heights(100))
}
max(mean_heights_100)
min(mean_heights_100)
max(mean_heights_1000)
min(mean_heights_1000)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(64, 73, by = 1)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(64, 73, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(64, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 72, by = 1) # the groupings along x axis
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
mean_heights_100 = numeric() # creates empty vector w/ infinite spaces for unknown values
for(i in 1:1000){
mean_heights_100 <- c(mean_heights_100, get_heights(100))
}
mean_heights_100
mean_heights_1000 = numeric()
for(i in 1:1000){
mean_heights_1000 <- c(mean_heights_1000, get_heights(100))
}
max(mean_heights_100)
min(mean_heights_100)
max(mean_heights_1000)
min(mean_heights_1000)
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 72, by = 1) # the groupings along x axis
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(64, 72, by = 1) # the groupings along x axis
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(64, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(64, 72, by = 0.5) # the groupings along x axis
# seq (min, max, by)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(64, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(64, 72, by = 1) # the groupings along x axis
# seq (min, max, by)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(64, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
get_heights <- function(x) {
y <- rnorm(rsample, mean = 69, sd = 10)
mean.y <- mean(y)
return(mean.y)
}
mean_heights_100 = numeric() # creates empty vector w/ infinite spaces for unknown values
for(i in 1:1000){
mean_heights_100 <- c(mean_heights_100, get_heights(100))
}
get_heights <- function(x) {
y <- rnorm(x, mean = 69, sd = 10)
mean.y <- mean(y)
return(mean.y)
}
mean_heights_100 = numeric() # creates empty vector w/ infinite spaces for unknown values
for(i in 1:1000){
mean_heights_100 <- c(mean_heights_100, get_heights(100))
}
mean_heights_1000 = numeric()
for(i in 1:1000){
mean_heights_1000 <- c(mean_heights_1000, get_heights(100))
}
max(mean_heights_100)
min(mean_heights_100)
max(mean_heights_1000)
min(mean_heights_1000)
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(64, 72, by = 1) # the groupings along x axis
# seq (min, max, by); the min should be 1 unit less than the actual min value (65)
# but R has an error when you do 1 unit above the actual max (72)
# Instead, for max, used 72 to avoid error and kept min as true min
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(64, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 72, by = 1) # the groupings along x axis
# seq (min, max, by); the min should be 1 unit less than the actual min value (65)
# but R has an error when you do 1 unit above the actual max (72)
# Instead, for max, used 72 to avoid error and kept min as true min
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 71, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 71, by = 1) # the groupings along x axis
# seq (min, max, by); the min should be 1 unit less than the actual min value (65)
# but R has an error when you do 1 unit above the actual max (72)
# Instead, for max, used 72 to avoid error and kept min as true min
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 71, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 72, by = 1)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 73, by = 1) # the groupings along x axis
# seq (min, max, by); the min should be 1 unit less than the actual min value (65)
# but R has an error when you do 1 unit above the actual max (72)
# Instead, for max, used 72 to avoid error and kept min as true min
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
mean_heights_1000 = numeric()
for(i in 1:1000){
mean_heights_1000 <- c(mean_heights_1000, get_heights(1000))
}
mean_heights_1000
max(mean_heights_100)
min(mean_heights_100)
max(mean_heights_1000)
min(mean_heights_1000)
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 72, by = 1) # the groupings along x axis
# seq (min, max, by); the min should be 1 unit less than the actual min value (65)
# but R has an error when you do 1 unit above the actual max (72)
# Instead, for max, used 72 to avoid error and kept min as true min
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 72, by = 1)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 73, by = 1) # the groupings along x axis
# seq (min, max, by); the min should be 1 unit less than the actual min value (65)
# but R has an error when you do 1 unit above the actual max (72)
# Instead, for max, used 72 to avoid error and kept min as true min
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 73, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 1), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(65, 73, by = 0.5)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72, by = 0.5), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72.5, by = 0.5), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
legend(-15,0.4,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1.5)
legend(65,400,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1.5)
legend(0,400,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1.5)
legend(0,400,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts # the quantity of data that falls into that bin
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72.5, by = 0.5), # these need to match the defined bins
xlab = "Value",
ylab = "Count")
legend(0,400,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1)
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72.5, by = 0.5), # these need to match the defined bins
xlab = "Average height (inches)",
ylab = "Count")
legend(0,400,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1)
pdf(file="RBootcamp_Lohmueller_Barplot.pdf", width=6,height=6);
barplot(rbind(counts_100, counts_1000),
col = c("red", "blue"),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(65, 72.5, by = 0.5), # these need to match the defined bins
xlab = "Average height (inches)",
ylab = "Count")
legend(0,400,c("n = 100","n = 1000"),lwd=4,col=c("red", "blue"),cex=1)
# legend (x, y) for location on quadrant
# cex = size of legend box. May need to reset the hist code too
dev.off()
getwd()
setwd("/Users/BenjaminHa/Box Sync/RBootcamp/RBootcamp")
snpsDataFrame=read.table('hapmap_CEU_r23a_chr2_ld-2.txt', header=TRUE) # load data
phenoDataFrame=read.table('pheno.sim.2014-2.txt', header=TRUE) # load data
snps=as.matrix(snpsDataFrame) # convert dataframe into a matrix
head(snpsDataFrame)
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
chisqs=apply(snps,1,compute_chisquare)
chisqs2=apply(snps,1,compute_chisquare_2)
chisqs=apply(snps,1,compute_chisquare)
chisqs2=apply(snps,0,compute_chisquare_2)
chisqs2=apply(snps,1,compute_chisquare_2)
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
chisqs2 = ?apply(snps,1,compute_chisquare_2)
?apply()
chisqs = apply(snps,1,compute_chisquare)
chisqs
chisqs2 = apply(snps,1,compute_chisquare_2)
warnings()
pvals=pchisq(chisqs,1,lower.tail=FALSE)
pvals
freq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
chisqs = apply(snps,1,compute_chisquare)
pvals=pchisq(chisqs,1,lower.tail=FALSE) # worked, since only referring to chisqs vector
pvals(pvals < 0.05)
pvals < 0.05
(pvals < 0.05) / pvals
summary(pvals)
prop.table(pvals)
?subset()
subset(pvals,
subset < 0.05)
subset(pvals < 0.05)
subset(pvals < 0.05)
subset(pvals, pvals < 0.05)
low.pval <- subset(pvals, pvals < 0.05)
low.pval
summary(low.pval)
length(low.pval)
length(low.pval) / length(pvals)
high.pval <- subset(pvals, pvals < 0.05)
length(high.pval) / length(pvals) # proportion of pvals < 0.05
mid.pval <- subset(pvals, pvals < 0.01)
low.pval <- subset(pvals, pvals < 0.001)
length(low.pval) / length(pvals) # proportion of pvals < 0.001
NA.pval <- subset(pvals, pvals == "NA")
NA.pval
sum(is.na(df$col))
sum(is.na(pvals$col))
col(pvals)
pvals
sum(is.na(pvals$row))
sum(is.na(pvals$rows))
dim(snps)
dim(pvals)
dim(pvals, na.omit(NA))
dim(pvals, na.rm = TRUE)
dim(snps, na.rm = TRUE)
length(snps, na.rm = TRUE)
dim(snps)
snps
head(pvals)
dim(pvals)
length(pvals)
num_pval <- length(pvals)
for(ii in 1:length(num_pval))
min(num.pval)
num_pval <- length(pvals)
min(num.pval)
num.pval
num_pval <- length(pvals)
num.pval
num_pval
min(pval)
min(pvals)
max(pvals)
min.pvals <- min(pvals)
min.pvals
min(pvals) / num_pval
empty.pvals <- numeric()
exp.pvals <- numeric() # empty vector to store data
for(ii in 1:length(num_pval)){
exp_pvals[ii] <- (((min(pvals)) + 1)[ii]) / num_pval
}
exp_pvals <- numeric() # empty vector to store data
for(ii in 1:length(num_pval)){
exp_pvals[ii] <- (((min(pvals)) + 1)[ii]) / num_pval
}
exp_pvals
exp_pvals <- rep(NA, 1, 4014) # empty vector with 1 row, 4014 col to store data
for(ii in 1:length(num_pval)){
exp_pvals[ii] <- (((min(pvals)) + 1)[ii]) / num_pval
}
exp_pvals
for(ii in 1:length(num_pval)){
exp_pvals[ii] <- min(pvals[ii] + 1) / num_pval
}
exp_pvals
head(exp_pvals)
for(ii in 1:length(num_pval)){
exp_pvals[ii] <- (pvals[ii] + 1) / num_pval
}
head(exp_pvals)
for(ii in 1:length(pvals)){
exp_pvals[ii] <- (pvals[ii] + 1) / num_pval
}
head(exp_pvals)
tail(exp_pvals)
exp_pvals
?sort()
sort(exp_pvals, decreasing = TRUE)
head(exp_pvals)
exp_pvals
sort(exp_pvals, decreasing = TRUE)
head(exp_pvals)
log_sort_pvals <- -log10(sort_pval)
sort_pval <- sort(exp_pvals, decreasing = TRUE)
head(exp_pvals) # not in decreasing order?
log_sort_pvals <- -log10(sort_pval)
log_exp_pvals <- -log10(sort_pval)
qqplot(log_sort_pvals, log_exp_pvals,)
qqplot(log_sort_pvals, log_exp_pvals,
xlab = "sort pvals",
ylab = "exp pvals",
main = "title")
qqplot(log_exp_pvals, log_sort_pvals,
xlab = "-log10(expected P-value",
ylab = "-log10(observed P-value")
log_exp_pvals <- -log10(pvals)
qqplot(log_exp_pvals, log_sort_pvals,
xlab = "-log10(expected P-value",
ylab = "-log10(observed P-value")
log_sort_pvals <- -log10(pvals)
log_exp_pvals <- -log10(sort_pvals)
qqplot(log_exp_pvals, log_sort_pvals,
xlab = "-log10(expected P-value",
ylab = "-log10(observed P-value")
log_sort_pvals <- -log10(sort_pval)
log_exp_pvals <- -log10(pvals)
qqplot(log_exp_pvals, log_sort_pvals,
xlab = "-log10(expected P-value",
ylab = "-log10(observed P-value")
log_sort_pvals <- -log10(sort_pval)
log_exp_pvals <- -log10(sort_pval)
qqplot(log_exp_pvals, log_sort_pvals,
xlab = "-log10(expected P-value",
ylab = "-log10(observed P-value")
