for (ii in lower:upper){
cat(ii, ii^2, "\n")
squaresum <- squaresum +  ii^2
}
lower = 1; upper = 5; squaresum = 0
for (ii in lower:upper){
cat(ii, ii^2, "\n")
squaresum <- squaresum +  ii^2
}
cat("the sum of it all is ", squaresum)
for (ii in 1:9){
cat("\n ", ii)
}
cat("\n",  )
cat("\n",)
for (ii in 1:9){
cat("\n")
}
for (ii in 1:9){
cat("\n", sep = "*")
}
?for
?for()
?for{}
?for
)
for (ii in 1:9){
if (ii %% 9) {}
cat("\n",)
}
for (ii in 1:9){
if (II %% 9)
cat("\n",)
}
for (ii in 1:9){
if (ii %% 9)
cat("\n",)
}
for (ii in 1:9){
cat("\n",)
}
for (ii in 1:9){
cat("\n", )
}
for (ii in 1:9){
cat("\n")
}
if (ii %% *){
cat("\n")
}
if (ii %% "*"){
cat("\n")
}}
for (ii in 1:9){
cat("\n")
}
for (ii in 1:9){
cat("\n*")
}
for (ii in 1:9){
cat("\n*", ii == 9)
}
for (ii in 1:9){
cat("\n*", ii == 1:8, ii == 9)
}
for (ii in 1:9){
cat("\n*", ii == 9)
}
for (ii in 1:9){
cat("\n*", ii == 9)
}
}
for (ii in 1:9){
if (ii == 1:8) {
cat(ii, "\n")
}
if (ii == 9) {
cat(ii, "\n*")
}
}
for (ii in 1:9){
if (ii == 1:8) {
cat(ii, "\n")
}
else{
cat (ii, "\n*")
}
}
if (ii == 1:8) {
cat("\n")
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', sep = '\t')
}
if(n[ii] > -1 | n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t')
}
if(n[ii] <= 1){
cat(n[ii], 'Large', sep = '\t')
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', sep = '\t')
}
if(n[ii] > -1 | n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t')
}
if(n[ii] <= 1){
cat(n[ii], 'Large', sep = '\t')
}
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', sep = '\t')
}
if(n[ii] > -1 | n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t')
}
if(n[ii] <= 1){
cat(n[ii], 'Large', sep = '\t')
}
}
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n[ii] > -1 | n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n[ii] <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', fill = T)
}
if(n[ii] > -1 | n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n[ii] <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', fill = T)
}
if(n[ii] > -1 | n[ii] < 1){
cat(n[ii], 'Medium', fill = T)
}
if(n[ii] <= 1){
cat(n[ii], 'Large', fill = T)
}
}
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 %in% n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 | < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n <= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n >= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n >= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n >= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
length(n)
n <- c(-3:3)
n
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n >= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n
n[ii]
n <- c(-3:3)
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n[ii] > -1 & n < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n[ii] >= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
n <- c(-3:3)
for(ii in 1:length(n)){
if(n[ii] <= -1){
cat(n[ii], 'Small', sep = '\t', fill = T)
}
if(n[ii] > -1 & n[ii] < 1){
cat(n[ii], 'Medium', sep = '\t', fill = T)
}
if(n[ii] >= 1){
cat(n[ii], 'Large', sep = '\t', fill = T)
}
}
setwd("~/Box Sync/RBootcamp/RBootcamp")
getwd()
heights <- rnorm(1000, mean = 69, sd = 10)
head(heights)
mean(heights)
mean(heights)
get_heights <- function(x) {
heights <- rnorm(1000, mean = 69, sd = 10)
return(heights)
}
get_heights()
get_heights <- function(x) {
rnorm(1000, mean = 69, sd = 10)
return(1000)
}
get_heights()
head(get_heights())
get_heights <- function(x) {
heights <- rnorm(1000, mean = 69, sd = 10)
return(heights)
}
head(get_heights())
head(get_heights())
heights <- get_heights()
head(heights)
head(heights)
get_heights <- function(x) {
x <- rnorm(1000, mean = 69, sd = 10)
return(x)
}
heights <- get_heights()
head(heights)
head(heights)
mean(heights)
?break
for(i in 1:5) print(1:i)
for(n in c(2,5,10,20,50)) {
x <- stats::rnorm(n)
cat(n, ": ", sum(x^2), "\n", sep = "")
}
for(i in get_heights()){
i[[n]] <- get_heights()
}
for(i in get_heights()){
p[[i]] <- get_heights()
}
samples.100 = 100
samples.100 = 100
p <- list(mode = "vector", length = samples.100)
for(i in get_heights()){
p[[i]] <- get_heights()
}
p[1]
samples.100 = 100
p <- list(mode = "vector", length = samples.100)
p
for(i in get_heights()){
p[[i]] <- get_heights()
}
p
p[1]
p[[1]]
for(i in 1:1000){
p[[i]] <- get_heights()
}
p[[1]]
head(p[1])
mean(p)
mean(p[i])
mean(p)
mean (p <- list(mode = "vector", length = samples.100)
for(i in 1:1000){
p[[i]] <- get_heights()
})
mean(samples.100)
samples.100 = 100
p <- list(mode = "vector", length = samples.100)
for(i in 1:1000){
mean_heights_100 <- mean(p[[i]] <- get_heights())
}
mean_heights_100
p[1]
samples.1000 = 1000
p <- list(mode = "vector", length = samples.1000)
for(i in 1:1000){
mean_heights_1000 <- mean(p[[i]] <- get_heights())
}
mean_heights_1000
bins <- seq(-80, 80, by = 1) # establish your own bins to be applied consistently
# to both data sets
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
samples.100 = 100
p <- list(mode = "vector", length = samples.100)
for(i in 1:1000){
mean_heights_100 <- p[[i]] <- get_heights()
}
mean_heights_100
samples.1000 = 1000
p <- list(mode = "vector", length = samples.1000)
for(i in 1:1000){
mean_heights_1000 <- p[[i]] <- get_heights()
}
mean_heights_1000
bins <- seq(-80, 80, by = 1) # establish your own bins to be applied consistently
# to both data sets
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
bins <- seq(-80, 80, by = 1)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
bins <- seq(-50, 50, by = 1)
hist(mean_heights_100, breaks = bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
bins <- seq(-50, 50, by = 1)
hist(mean_heights_100, breaks = bins)$breaks
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
hist(mean_heights_100,breaks=bins)$breaks
par(mfrow=c(1,1), mar=c(4, 4, 3, 2))
bins <- seq(-10, 10, by = 1) # establish your own bins to be applied consistently
# to both data sets
hist(mean_heights_100,breaks=bins)$breaks
barplot(rbind(counts_s1, counts_s3),
col = c(2, 4),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(-10, 9.5, by = 1),
xlab = "Value",
ylab = "Count")
barplot(rbind(mean_heights_100, mean_heights_1000),
col = c(2, 4),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(-10, 9.5, by = 1),
xlab = "Value",
ylab = "Count")
barplot(rbind(counts_100, counts_1000),
col = c(2, 4),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(-10, 9.5, by = 1),
xlab = "Value",
ylab = "Count")
hist(mean_heights_100,breaks=bins)$breaks
hist(mean_heights_1000, breaks = bins)$breaks
counts_100 <- hist(mean_heights_100, breaks = bins)$counts
counts_1000 <- hist(mean_heights_1000, breaks = bins)$counts
# Uh oh. Both counts read back an error because the max(s3) is larger than 10
max(s3)
min(s3)
# If this happens, modify your bins to fall within max range
# Still not working, not sure why
barplot(rbind(counts_100, counts_1000),
col = c(2, 4),
beside = TRUE, # puts bars beside one another. If false, they will overlap
names.arg = seq(-10, 9.5, by = 1),
xlab = "Value",
ylab = "Count")
mean_heights_100
samples.100 = 100
p <- list(mode = "vector", length = samples.100)
for(i in 1:1000){
mean_heights_100 <- p[[i]] <- mean(get_heights())
}
mean_heights_100
samples.100 = 100
p <- list(mode = "vector", length = samples.100)
for(i in 1:1000){
mean_heights_100 <- p[[i]] <- get_heights()
}
mean_heights_100
mean(p)
mean(p[1])
