rickerFun(234, 1000, 10, 700)
rickerFun(234, 1000, 10, 100)
rickerFun(2.5, 1000, 10, 100)
rickerFun(26, 1000, 10, 100)
rickerFun(27, 1000, 10, 100)
rickerFun(40, 1000, 10, 100)
rickerFun(40, 10, 10, 100)
rickerFun(6, 10, 10, 100)
rickerFun(232, 10, 10, 100)
rickerFun(22, 10, 10, 100)
rickerFun(2, 10, 10, 100)
rickerFun(1.1, 10, 10, 100)
rickerFun(1, 10, 10, 100)
rickerFun(3, 10, 10, 100)
par(mfrow=c(2,3))
par(mfrow=c(2,3))
rickerFun(2, 23, 100, 5)
pdf(file="LloydSmith_6Plots.pdf", width=6,height=6)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
dev.off()
pdf(file="Normal_hist.pdf", width=4,height=7);
> #open the file
par(mfrow=c(2,1), mar=c(4, 4, 3, 2)) #sets plotting area and margins
hist(s1,col=2,xlab="Value",main="Sigma=1") #make first hist
hist(s3,col=4,xlab="Value",main="Sigma=3") #make second hist
dev.off() #shuts off current output device
pdf(file="LloydSmith_6Plots.pdf", width=6,height=6)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
dev.off()
pdf(file="LloydSmith_6Plots.pdf", width=6,height=6)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
dev.off()
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
dev.off()
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
persistent <- rickerFun(2, 9.9, 100, 10)
dev.off()
pdf(file="LloydSmith_6Plots.pdf", width=6,height=6)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
persistent <- rickerFun(2, 9.9, 100, 10)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
pdf(file="LloydSmith_6Plots.pdf", width=6,height=6)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
dev.off()
pdf(file="LloydSmith_6Plots.pdf", width=6,height=6)
par(mfrow=c(2,3))
zero <- rickerFun(2, 0, 50, 10)
noOscil <- rickerFun(1, 100, 50, 1000)
wOscil <- rickerFun(2, 60, 100, 100)
chaos <- rickerFun(5, 60, 100, 100)
random <- rickerFun(2, 23, 100, 5)
persistent <- rickerFun(2, 9.9, 100, 10)
dev.off()
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun(1.1, 20, 10, 1000)
rickerFun(1.1, 20, 10, 1000)
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun(1.1, 20, 10, 1000)
dev.off()
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun(1.1, 20, 10, 1000)
rickerFun(2, 20, 10, 1000)
rickerFun(1, 20, 10, 1000)
rickerFun(0.5, 20, 10, 1000)
rickerFun(1.1, 20, 10, 1000)
rickerFun(1.5, 20, 10, 1000)
rickerFun(2, 20, 10, 1000)
rickerFun(0.8, 20, 10, 1000)
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
if (NN >= K/2){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun(0.8, 20, 10, 1000)
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
if (NN >= K/2){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
nVec <- rickerFun(0.8, 20, 10, 1000)
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
if (NN >= K/2){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K))) # Note NN[tt + 1] and NN[tt] usages
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun(0.8, 20, 10, 1000)
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K))) # Note NN[tt + 1] and NN[tt] usages
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun(0.8, 20, 10, 1000)
rickerFun(0.8, 20, 10, 1000)
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(NN >= K/2)
cat("\n")
}
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(n >= K/2)
cat("\n")
}
n = 20
rickerFun(0.8, 20, 10, 1000)
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(n >= K/2)
cat("\n")
}
K = 1000
rickerFun(0.8, 20, 10, 1000)
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(n >= K/2)
cat("\n")
}
ii[1]
rickerFun[1]
rickerFun(0.8, 20, 10, 1000)
nVec <- rickerFun(0.8, 20, 10, 1000)
nVec
nVec[1]
nVec[2]
nVec[ttMax = 6]
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(n >= K/2)
cat("\n")
}
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(n >= K/2)
}
for (rmodel in 1:length(rickerFun(0.8, 20, 10, 1000))){
if(n >= K/2)
cat("\n")
}
which(nVec >= K/2)
min(which(nVec >= K/2))
min(which(nVec >= K/2))
nVec[min(which(nVec >= K/2))]
which(nVec >= K/2) # use which() to find which index where nVec >= K/2
nVec <- rickerFun(0.8, 20, 10, 1000)
which(nVec >= K/2) # use which() to find which index(es) are nVec >= K/2
min(which(nVec >= K/2)) # use min() to find the minimum when nVec >= K/2
nVec[min(which(nVec >= K/2))] # use nVec[] to find popu value at when the min when nVec >= K/2
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K))) # Note NN[tt + 1] and NN[tt] usages
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
n <- numeric()
NN <- rep(NA, ttMax + 1)
NN[1] <- n
K <- 300
ttMax <- 10
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
r <- 0:1
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
ttMax <- 100
r <- 0:1
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
ttMax <- 50
r <- 0:1
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
r <- c(0, 1, by = 0.1)
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Growth Rate (r)",
col = "blue",
lty = 2,
type = "l")
r <- c(from = 0, to = 1, by = 0.1)
r
r <- seq(0, 1, by = 0.1)
r
for(tt in 1:ttMax){
if(r >= 0.1 & r <= 0.9){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K)))
}
}
data
data <- seq(0.1, 0.9, by = 0.1)
data
popu.data <- numeric()
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
rickerFun(data, 20, 50, 1000)
which(ttMax >= K/2){
}
}
for(ii in 1:length(data)){
rickerFun(data, 20, 50, 1000)
which(ttMax >= K/2)
}
data.2 <- rickerFun(data[ii], 20, 50, 1000))
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= 1000/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
print(data.2)
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.da
}
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
print(data.2)
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
plot(popu.data, data,
xlab = "growth rate (r)",
ylab = "time at K/2")
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
rickerFun <- function(r, n, ttMax, K){
NN <- rep(NA, ttMax + 1)
NN[1] <- n
for(tt in 1:ttMax){
NN[tt + 1] <- NN[tt]*exp(r*(1 - (NN[tt]/K))) # Note NN[tt + 1] and NN[tt] usages
}
plot (1:(ttMax + 1), NN,
xlab = "time",
ylab = "Population size",
col = "blue",
lty = 2,
type = "l")
return(NN)
}
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
print(data)
L
K
K = 1000
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, K) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- which.min(data.2 >= K/2) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- min(which(data.2 >= K/2)) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
K = 300
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- min(which(data.2 >= K/2)) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
K = 1000
data <- seq(0.1, 0.9, by = 0.1)
popu.data <- matrix(NA, nrow = 1, ncol = 9)
for(ii in 1:length(data)){
data.2 <- rickerFun(data[ii], 20, 50, 1000) # to collect all data within parameters 0.1 >= r >= 0.9
popu.data[ii] <- min(which(data.2 >= K/2)) # returns year when popu exceeds >= K/2
}
plot(data, popu.data,
xlab = "growth rate (r)",
ylab = "time at K/2")
